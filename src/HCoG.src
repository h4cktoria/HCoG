#include Debugging.src
#include Auxiliary.src

_state = {}

setVar = function(name, value = "NOT_SETTED_EXPLICITLY")
	assert(name isa string, "setVar(name, value): name must be a string!")
	assert(value != "NOT_SETTED_EXPLICITLY", "setVar(name, value): value must be setted explicitly!")
	_state[name] = value
end function

queryVar = function(name)
	assert(name isa string, "queryVar(name): name must be a string!")

	if _state.hasKey(name) then
		return _state[name]
	else
		return null
	end if
end function

initVar = function(name, value = "NOT_SETTED_EXPLICITLY")
	assert(name isa string, "initVar(name, value): name must be a string!")
	assert(value != "NOT_SETTED_EXPLICITLY", "initVar(name, value): value must be setted explicitly!")

	if queryVar(name) == null then
		setVar(name, value)
	end if

end function

// This is soo ridiculous omg
// Those who read this source code - I am so sorry
// but with OOP it would be even worser, believe me
_styling = {}
_styling.buttonSelectedPrefix = "> "
_styling.buttonSelectedPostfix = ""
_styling.buttonPrefix = "- "
_styling.buttonPostfix = ""
_styling.labelPrefix = "| "
_styling.labelPostfix = ""
_styling.inputBoxPrefix = "~ "
_styling.inputBoxPostfix = ""
_styling.inputBoxSelectedPrefix = "> "
_styling.inputBoxSelectedPostfix = ""

setStyle = function(styleOption, styleValue)
	assert(styleOption isa string, "setStyle(styleOption, styleValue): styleOption must be a string!")
	assert(styleValue isa string, "setStyle(styleOption, styleValue): styleValue must be a string!")
	assert(_styling.hasKey(styleOption), "setStyle(styleOption, styleValue): can't change style that doesn't exist!")
	_styling[styleOption] = styleValue
end function

_controls = {}
_controls.up = "uparrow"
_controls.down = "downarrow"
_controls.left = "leftarrow"
_controls.right = "rightarrow"

_controls.choose = "rightshift"

_controls.back = "rightcontrol"

setControls = function(controlsOption, key)
	assert(controlsOption isa string, "setControls(controlsOption, key): controlsOption must be a string!")
	assert(_styling.hasKey(controlsOption), "setControls(controlsOption, key): can't change controls that doesn't exist!")
	assert(key isa string, "setControls(controlsOption, key): key must be a string!")
	_controls[controlsOption] = key
end function

_keyboard = {}
_keyboard.lastPressed = char(0)

getch = function()
	return user_input(char(0), false, true).lower
end function

nogetch = function()
	_button.iter = 0
	_button.current = 0
	_logic.stopIter = true
end function

getLastGetch = function()
	return _keyboard.lastPressed
end function

_button = {}
_button.iter = 0
_button.current = 0

button = function(text, callback)
	assert(text isa string, "button(text, callback): text must be a string!")

	assert(isFunction(@callback), "button(text, callback): callback must be a function!")

	if _button.iter == _button.current then
		text = _styling.buttonSelectedPrefix + text + _styling.buttonSelectedPostfix

		if _keyboard.lastPressed == _controls.choose then
			_keyboard.lastPressed = char(0)
			_button.iter = 0
			_button.current = 0
			wrapper(@callback)
			_logic.nogetch = true
		end if
	else
		text = _styling.buttonPrefix + text + _styling.buttonPostfix
	end if

	print(text)
	_button.iter = _button.iter + 1
end function

inputBox = function(boxText, stateVarName, inputText = "Input: ", isHidden = false)
	assert(boxText isa string, "button(boxText, stateVarName, inputText, isHidden): boxText must be a string!")
	assert(stateVarName isa string, "button(boxText, stateVarName, inputText, isHidden): stateVarName must be a string!")
	assert(_state.hasKey(stateVarName), "button(boxText, stateVarName, inputText, isHidden): create stateVarName first!")
	assert(inputText isa string, "button(boxText, stateVarName, inputText, isHidden): inputText must be a string!")
	assert(isBoolean(isHidden), "button(boxText, stateVarName, inputText, isHidden): isHidden must be a boolean!")

	callback = function()
		_state[stateVarName] = user_input(inputText, isHidden)
		nogetch
	end function

	if _button.iter == _button.current then
		boxText = _styling.inputBoxSelectedPrefix + boxText + _styling.inputBoxSelectedPostfix

		if _keyboard.lastPressed == _controls.choose then
			_keyboard.lastPressed = char(0)
			_button.iter = 0
			_button.current = 0
			wrapper(@callback)
			_logic.nogetch = true
		end if
	else
		boxText = _styling.inputBoxPrefix + boxText + _styling.inputBoxPostfix
	end if

	print(boxText)
	_button.iter = _button.iter + 1
end function

label = function(text)
	assert(text isa string, "label(text): text must be a string!")
	print(_styling.labelPrefix + text + _styling.labelPostfix)
end function

_logic = {}
_logic.nogetch = false
_logic.stopIter = false

wrapper = function(tuiFunction)
	assert(isFunction(@tuiFunction), "wrapper(tuiFunction): tuiFunction must be a function!")

	while true
		_button.iter = 0
		clear_screen
		tuiFunction

		if _logic.stopIter == true then
			_logic.stopIter = false
			break
		end if

		if _logic.nogetch == true then
			_logic.nogetch = false
			continue
		end if

		_keyboard.lastPressed = getch

		if _keyboard.lastPressed == _controls.back then
			_keyboard.lastPressed = char(0)
			_button.current = 0
			break
		end if

		if _keyboard.lastPressed == _controls.up then
			if _button.current <= 0 then
				_button.current = 0
			else
				_button.current = _button.current - 1
			end if

		else if _keyboard.lastPressed == _controls.down then
			if _button.current >= _button.iter - 1 then
				_button.current = _button.iter - 1
			else
				_button.current = _button.current + 1
			end if

		end if

		yield
	end while

end function
